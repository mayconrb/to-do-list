# -*- coding: utf-8 -*-
"""TO_DO_LIST_Manipulando Estrutura de Dados em Listas e Arvore.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y4M9k1EKJRbJALbeyjJioy_P8o3U7-LL
"""

from collections import Counter
import matplotlib.pyplot as plt

class Tarefa:
    def __init__(self, nome, etiqueta, status="A Fazer"):
        self.nome = nome
        self.etiqueta = etiqueta
        self.status = status
        self.dependencias = [] #lista de dependencias
        self.subtarefas = [] #lista de subtarefas

    def adicionar_dependencia(self, tarefa):
        self.dependencias.append(tarefa)

    def adicionar_subtarefa(self, subtarefa):
        self.subtarefas.append(subtarefa)

    def concluir_tarefa(self):
        self.status = "Concluída"

    def atualizar_status(self, novo_status):
        self.status = novo_status

    def mostrar_arvore(self, nivel=0):
        prefixo = "  " * nivel
        print(f"{prefixo}|- {self.nome} ({self.status})")
        for sub_tarefa in self.subtarefas:
            sub_tarefa.mostrar_arvore(nivel + 1)

class Projeto:
    def __init__(self, nome):
        self.nome = nome
        self.tarefas = [] #listas de tarefas

    def adicionar_tarefa(self, tarefa): #Nós Pais
        self.tarefas.append(tarefa)

    def adicionar_subtarefa(self, nome_tarefa_principal, subtarefa): #Nós Filhos
        tarefa_principal = self.encontrar_tarefa(nome_tarefa_principal)
        if tarefa_principal:
            tarefa_principal.adicionar_subtarefa(subtarefa)
            print(f'Sub-tarefa {subtarefa.nome} adicionada à tarefa {tarefa_principal.nome}.')
        else:
            print('Tarefa principal não encontrada.')

    def encontrar_tarefa(self, nome_tarefa):
        for tarefa in self.tarefas:
            if tarefa.nome == nome_tarefa:
                return tarefa
        return None

    def remover_tarefa(self, tarefa):
        if tarefa in self.tarefas:
            self.tarefas.remove(tarefa)

    def concluir_tarefa(self, tarefa):
        if tarefa in self.tarefas:
            tarefa.concluir_tarefa()

    def atualizar_status_tarefa(self, tarefa, novo_status):
        if tarefa in self.tarefas:
            tarefa.atualizar_status(novo_status)

    def visualizacao_tarefas(self):
        status_tarefas = [tarefa.status for tarefa in self.tarefas]
        etiquetas = [tarefa.etiqueta for tarefa in self.tarefas]

        plt.figure(figsize=(10, 5))
        plt.bar(Counter(status_tarefas).keys(), Counter(status_tarefas).values(), color=['red', 'yellow', 'green'])
        plt.title('Tarefas por Status')
        plt.xlabel('Status')
        plt.ylabel('Número de Tarefas')
        plt.show()

def criar_tarefa():
    nome = input("Nome da tarefa: ")
    etiqueta = input("Etiqueta da Prioridade: 'Baixa' - 'Média' - 'Urgente' ")
    status = input("Status da Tarefa ('A Fazer' - 'Em Andamento' - 'Concluída'): ")
    return Tarefa(nome, etiqueta, status)

def criar_subtarefa():
    nome = input("Nome da sub-tarefa: ")
    etiqueta = input("Etiqueta da Sub-Tarefa 'Baixa' - 'Média' - 'Urgente': ")
    status = input("Status da Sub-Tarefa ('A Fazer' - 'Em Andamento' - 'Concluída'): ")
    return Tarefa(nome, etiqueta, status)

def menu_adicionar_tarefa(projeto):
    tarefa = criar_tarefa()
    projeto.adicionar_tarefa(tarefa) #listas de tarefas
    print(f'Tarefa {tarefa.nome} adicionada ao projeto.')

def menu_adicionar_subtarefa(projeto):
    nome_tarefa_principal = input('Nome da tarefa principal: ')
    subtarefa = criar_subtarefa()
    projeto.adicionar_subtarefa(nome_tarefa_principal, subtarefa)

def menu_remover_tarefa(projeto):
    nome_tarefa = input('Tarefa que deseja remover: ')
    tarefa_encontrada = projeto.encontrar_tarefa(nome_tarefa)

    if tarefa_encontrada:
        projeto.remover_tarefa(tarefa_encontrada)
        print(f'Tarefa {tarefa_encontrada.nome} removida com sucesso!')
    else:
        print('Tarefa não encontrada.')

def menu_concluir_tarefa(projeto):
    nome_tarefa = input("Tarefa a ser Concluída: ")
    tarefa_encontrada = projeto.encontrar_tarefa(nome_tarefa)

    if tarefa_encontrada:
        projeto.concluir_tarefa(tarefa_encontrada)
        print(f'Tarefa {tarefa_encontrada.nome} Concluída!')
    else:
        print('Tarefa não encontrada.')

def menu_atualizar_status_tarefa(projeto):
    nome_tarefa = input('Tarefa a ser Atualizada: ')
    tarefa_encontrada = projeto.encontrar_tarefa(nome_tarefa)

    if tarefa_encontrada:
        novo_status = input("Digite o novo status ('A Fazer' - 'Em Andamento' - 'Concluída'): ")
        projeto.atualizar_status_tarefa(tarefa_encontrada, novo_status)
        print(f'Status da Tarefa {tarefa_encontrada.nome} atualizado para {novo_status}.')
    else:
        print('Tarefa não encontrada.')

def menu_principal(projeto):
    while True:
        print("\n=== Menu Principal ===")
        print("1. Adicionar Tarefa")
        print("2. Adicionar Subtarefa")
        print("3. Remover Tarefa")
        print("4. Concluir Tarefa")
        print("5. Atualizar Status da Tarefa")
        print("6. Visualizar Tarefas por Status")
        print("7. Mostrar Árvore de Tarefas")
        print("0. Sair")

        escolha = input("Escolha uma opção: ")

        if escolha == "1":
            menu_adicionar_tarefa(projeto)
        elif escolha == "2":
            menu_adicionar_subtarefa(projeto)
        elif escolha == "3":
            menu_remover_tarefa(projeto)
        elif escolha == "4":
            menu_concluir_tarefa(projeto)
        elif escolha == "5":
            menu_atualizar_status_tarefa(projeto)
        elif escolha == "6":
            projeto.visualizacao_tarefas()
        elif escolha == "7":
            print("Árvore de Tarefas:")
            for tarefa in projeto.tarefas:
                tarefa.mostrar_arvore()
        elif escolha == "0":
            break
        else:
            print("Opção inválida. Tente novamente.")

if __name__ == "__main__":
    menu_inicial()

1

